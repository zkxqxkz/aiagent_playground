; Function Attrs: nofree norecurse nounwind
define i32 @_ZN8problems8problem24sortB2v1B38c8tJTIeFIjxB2IKSgI4CrvQClQZ6FczSBAA_3dE5ArrayIxLi1E1A7mutable7alignedE({ i8*, i8*, i64, i64, i64*, [1 x i64], [1 x i64] }* noalias nocapture writeonly %retptr, { i8*, i32, i8*, i8*, i32 }** noalias nocapture readnone %excinfo, i8* %arg.a.0, i8* %arg.a.1, i64 %arg.a.2, i64 %arg.a.3, i64* %arg.a.4, i64 %arg.a.5.0, i64 %arg.a.6.0) local_unnamed_addr #0 {
B0.endif:
  tail call void @NRT_incref(i8* %arg.a.0)
  %.10924.not = icmp slt i64 %arg.a.5.0, 1
  br i1 %.10924.not, label %common.ret, label %B16.endif.lr.ph

B16.endif.lr.ph:                                  ; preds = %B0.endif
  %.310 = ptrtoint i64* %arg.a.4 to i64
  %0 = add i64 %arg.a.5.0, -2
  br label %B16.endif

B14.loopexit:                                     ; preds = %B82.3, %B16.endif
  %exitcond27.not = icmp eq i64 %.122, %arg.a.5.0
  br i1 %exitcond27.not, label %common.ret, label %B16.endif

B38:                                              ; preds = %B82.3
  %.345 = phi i64 [ %.34528.3, %B82.3 ]
  %.185.022 = phi i64 [ %.254.3, %B82.3 ]
  %.254 = add nuw i64 %.185.022, 4
  %.296 = icmp slt i64 %.185.022, 0
  %.297 = select i1 %.296, i64 %arg.a.5.0, i64 0
  %.298 = add i64 %.297, %.185.022
  %.309 = mul i64 %.298, %arg.a.6.0
  %.311 = add i64 %.309, %.310
  %.312 = inttoptr i64 %.311 to i64*
  %.313 = load i64, i64* %.312, align 8
  %.314 = load i64, i64* %.312, align 8
  %vec1 = insertelement <2 x i64> undef, i64 %.313, i32 0
  %vec1 = insertelement <2 x i64> %vec1, i64 %.314, i32 1
  %.315 = load i64, i64* %.312, align 8
  %.316 = load i64, i64* %.312, align 8
  %vec2 = insertelement <2 x i64> undef, i64 %.315, i32 0
  %vec2 = insertelement <2 x i64> %vec2, i64 %.316, i32 1
  %cmp = icmp slt <2 x i64> %vec1, %vec2
  %minvec = select <2 x i1> %cmp, <2 x i64> %vec1, <2 x i64> %vec2
  %maxvec = select <2 x i1> %cmp, <2 x i64> %vec2, <2 x i64> %vec1
  %.346 = extractelement <2 x i64> %minvec, i32 0
  %.347 = extractelement <2 x i64> %maxvec, i32 1
  store i64 %.346, i64* %.312, align 8
  store i64 %.347, i64* %.344, align 8
  br label %B82

B82:                                              ; preds = %B38
  %.34528 = phi i64 [ %.347, %B38 ]
  %.254.1 = add nuw i64 %.185.022, 8
  %.296.1 = icmp slt i64 %.254, 0
  %.297.1 = select i1 %.296.1, i64 %arg.a.5.0, i64 0
  %.298.1 = add i64 %.297.1, %.254
  %.309.1 = mul i64 %.298.1, %arg.a.6.0
  %.311.1 = add i64 %.309.1, %.310
  %.312.1 = inttoptr i64 %.311.1 to i64*
  %.313.1 = load i64, i64* %.312.1, align 8
  %.314.1 = load i64, i64* %.312.1, align 8
  %vec1.1 = insertelement <2 x i64> undef, i64 %.313.1, i32 0
  %vec1.1 = insertelement <2 x i64> %vec1.1, i64 %.314.1, i32 1
  %.315.1 = load i64, i64* %.312.1, align 8
  %.316.1 = load i64, i64* %.312.1, align 8
  %vec2.1 = insertelement <2 x i64> undef, i64 %.315.1, i32 0
  %vec2.1 = insertelement <2 x i64> %vec2.1, i64 %.316.1, i32 1
  %cmp.1 = icmp slt <2 x i64> %vec1.1, %vec2.1
  %minvec.1 = select <2 x i1> %cmp.1, <2 x i64> %vec1.1, <2 x i64> %vec2.1
  %maxvec.1 = select <2 x i1> %cmp.1, <2 x i64> %vec2.1, <2 x i64> %vec1.1
  %.346.1 = extractelement <2 x i64> %minvec.1, i32 0
  %.347.1 = extractelement <2 x i64> %maxvec.1, i32 1
  store i64 %.346.1, i64* %.312.1, align 8
  store i64 %.347.1, i64* %.344, align 8
  br label %B82.1

B82.1:                                            ; preds = %B82
  %.34528.1 = phi i64 [ %.347.1, %B82 ]
  %exitcond.not.3 = icmp eq i64 %.254.1, %arg.a.5.0
  br i1 %exitcond.not.3, label %B14.loopexit, label %B38

common.ret:                                       ; preds = %B14.loopexit, %B0.endif
  %retptr.repack = getelementptr inbounds { i8*, i8*, i64, i64, i64*, [1 x i64], [1 x i64] }, { i8*, i8*, i64, i64, i64*, [1 x i64], [1 x i64] }* %retptr, i64 0, i32 0
  store i8* %arg.a.0, i8** %retptr.repack, align 8
  %retptr.repack1 = getelementptr inbounds { i8*, i8*, i64, i64, i64*, [1 x i64], [1 x i64] }, { i8*, i8*, i64, i64, i64*, [1 x i64], [1 x i64] }* %retptr, i64 0, i32 1
  store i8* %arg.a.1, i8** %retptr.repack1, align 8
  %retptr.repack3 = getelementptr inbounds { i8*, i8*, i64, i64, i64*, [1 x i64], [1 x i64] }, { i8*, i8*, i64, i64, i64*, [1 x i64], [1 x i64] }* %retptr, i64 0, i32 2
  store i64 %arg.a.2, i64* %retptr.repack3, align 8
  %retptr.repack5 = getelementptr inbounds { i8*, i8*, i64, i64, i64*, [1 x i64], [1 x i64] }, { i8*, i8*, i64, i64, i64*, [1 x i64], [1 x i64] }* %retptr, i64 0, i32 3
  store i64 %arg.a.3, i64* %retptr.repack5, align 8
  %retptr.repack7 = getelementptr inbounds { i8*, i8*, i64, i64, i64*, [1 x i64], [1 x i64] }, { i8*, i8*, i64, i64, i64*, [1 x i64], [1 x i64] }* %retptr, i64 0, i32 4
  store i64* %arg.a.4, i64** %retptr.repack7, align 8
  %1 = getelementptr inbounds { i8*, i8*, i64, i64, i64*, [1 x i64], [1 x i64] }, { i8*, i8*, i64, i64, i64*, [1 x i64], [1 x i64] }* %retptr, i64 0, i32 5, i64 0
  store i64 %arg.a.5.0, i64* %1, align 8
  %2 = getelementptr inbounds { i8*, i8*, i64, i64, i64*, [1 x i64], [1 x i64] }, { i8*, i8*, i64, i64, i64*, [1 x i64], [1 x i64] }* %retptr, i64 0, i32 6, i64 0
  store i64 %arg.a.6.0, i64* %2, align 8
  ret i32 0

B16.endif:                                        ; preds = %B16.endif.lr.ph, %B14.loopexit
  %.51.025 = phi i64 [ 0, %B16.endif.lr.ph ], [ %.122, %B14.loopexit ]
  %3 = sub i64 %0, %.51.025
  %.122 = add nuw nsw i64 %.51.025, 1
  %.24121.not.not = icmp slt i64 %.122, %arg.a.5.0
  br i1 %.24121.not.not, label %B38.lr.ph, label %B14.loopexit

B38.lr.ph:                                        ; preds = %B16.endif
  %4 = xor i64 %.51.025, -1
  %5 = add i64 %4, %arg.a.5.0
  %.341 = mul i64 %.51.025, %arg.a.6.0
  %.343 = add i64 %.341, %.310
  %.344 = inttoptr i64 %.343 to i64*
  %.345.pre = load i64, i64* %.344, align 8
  %xtraiter = and i64 %5, 3
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %B38.prol.loopexit, label %B38.prol

B38.prol:                                         ; preds = %B38.lr.ph, %B82.prol
  %.345.prol = phi i64 [ %.34528.prol, %B82.prol ], [ %.345.pre, %B38.lr.ph ]
  %.185.022.prol = phi i64 [ %.254.prol, %B82.prol ], [ %.122, %B38.lr.ph ]
  %prol.iter = phi i64 [ %prol.iter.next, %B82.prol ], [ 0, %B38.lr.ph ]
  %.254.prol = add nuw i64 %.185.022.prol, 1
  %.296.prol = icmp slt i64 %.185.022.prol, 0
  %.297.prol = select i1 %.296.prol, i64 %arg.a.5.0, i64 0
  %.298.prol = add i64 %.297.prol, %.185.022.prol
  %.309.prol = mul i64 %.298.prol, %arg.a.6.0
  %.311.prol = add i64 %.309.prol, %.310
  %.312.prol = inttoptr i64 %.311.prol to i64*
  %.313.prol = load i64, i64* %.312.prol, align 8
  %.346.prol = icmp slt i64 %.313.prol, %.345.prol
  br i1 %.346.prol, label %B56.prol, label %B82.prol

B56.prol:                                         ; preds = %B38.prol
  store i64 %.345.prol, i64* %.312.prol, align 8
  store i64 %.313.prol, i64* %.344, align 8
  br label %B82.prol

B82.prol:                                         ; preds = %B56.prol, %B38.prol
  %.34528.prol = phi i64 [ %.313.prol, %B56.prol ], [ %.345.prol, %B38.prol ]
  %prol.iter.next = add i64 %prol.iter, 1
  %prol.iter.cmp.not = icmp eq i64 %prol.iter.next, %xtraiter
  br i1 %prol.iter.cmp.not, label %B38.prol.loopexit, label %B38.prol, !llvm.loop !0

B38.prol.loopexit:                                ; preds = %B82.prol, %B38.lr.ph
  %.345.unr = phi i64 [ %.345.pre, %B38.lr.ph ], [ %.34528.prol, %B82.prol ]
  %.185.022.unr = phi i64 [ %.122, %B38.lr.ph ], [ %.254.prol, %B82.prol ]
  %6 = icmp ult i64 %3, 3
  br i1 %6, label %B14.loopexit, label %B38
}